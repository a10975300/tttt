# Generated by Django 2.2 on 2023-09-20 10:22

import ckeditor_uploader.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('product', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SymptomCategory_First',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_Name', models.CharField(default='NA', help_text='类别名', max_length=50, verbose_name='Category Name')),
                ('category_Desc', ckeditor_uploader.fields.RichTextUploadingField(default='', help_text='类别描述', verbose_name='Category Desc')),
                ('cratedate', models.DateTimeField(default=datetime.datetime.now, help_text='创建时间', verbose_name='CreateDate')),
            ],
            options={
                'verbose_name': 'Category-I',
                'verbose_name_plural': 'Category-I',
                'db_table': 'datacube_category_1',
            },
        ),
        migrations.CreateModel(
            name='SymptomCategory_Second',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_Name', models.CharField(default='NA', help_text='类别名', max_length=50, verbose_name='Category Name')),
                ('category_Desc', ckeditor_uploader.fields.RichTextUploadingField(default='', help_text='类别描述', verbose_name='Category Desc')),
                ('cratedate', models.DateTimeField(default=datetime.datetime.now, help_text='创建时间', verbose_name='CreateDate')),
                ('category_FirstType', models.ForeignKey(help_text='问题分类_I', on_delete=django.db.models.deletion.CASCADE, to='npi.SymptomCategory_First', verbose_name='Categoroy-I')),
            ],
            options={
                'verbose_name': 'Category-II',
                'verbose_name_plural': 'Category-II',
                'db_table': 'datacube_category_2',
            },
        ),
        migrations.CreateModel(
            name='RegionalCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpe_owner', models.CharField(choices=[('Kevin Qian', 'Kevin Qian'), ('Wilson Xiao', 'Wilson Xiao'), ('Scott She', 'Scott She'), ('Chris Cui', 'Chris Cui'), ('Ivy Zeng', 'Ivy Zeng'), ('Niko Zhou', 'Niko Zhou'), ('Damon Wang', 'Damon Wang'), ('Tian Zhang', 'Tian Zhang'), ('Miller Shih', 'Miller Shih'), ('Franky He', 'Franky He'), ('Matt Peng', 'Matt Peng')], max_length=50, verbose_name='Platform PE')),
                ('odm_name', models.CharField(choices=[('India', 'India'), ('IMX', 'IMX')], max_length=15, verbose_name='Factory')),
                ('process_name', models.CharField(choices=[('1-SMT', 'SMT'), ('2-Off-line Assy', 'Offline-Assy'), ('3-Sub Assy Test', 'Offline-Test'), ('4-Final Assy ', 'FA'), ('5-Pre Test', 'Pre-Test'), ('6-Run-In', 'Run-In'), ('7-Image Download', 'Image D/L'), ('8-OOBA ', 'OOBA'), ('9-Packing ', 'Packing')], max_length=50, verbose_name='Mfg Process')),
                ('product_segment', models.CharField(choices=[('1000', '1000'), ('800', '800'), ('600', '600'), ('400', '400'), ('mWS', 'mWS'), ('Spectre', 'Spectre'), ('ENVY', 'ENVY'), ('Pavilion', 'Pavilion'), ('OMEN', 'OMEN'), ('Pavilion Gaming', 'Pavilion Gaming'), ('OPP', 'OPP'), ('Victus', 'Victus'), ('Chromebook', 'Chromebook'), ('Education', 'Education'), ('Dock', 'Dock'), ('TC', 'TC'), ('RPOS', 'RPOS')], max_length=20, verbose_name='Segment')),
                ('build_stage', models.CharField(choices=[('P/R-1', 'P/R-1'), ('P/R-2', 'P/R-2'), ('Sustaining', 'Sustaining'), ('Field', 'Field')], max_length=30, verbose_name='Stage')),
                ('impact_scope', models.CharField(choices=[('Factory', 'Factory'), ('Field ', 'Field'), ('Field + Factory', 'Field+Factory')], max_length=50, verbose_name='Impact Scope')),
                ('input_qty', models.IntegerField(verbose_name='Input')),
                ('defect_qty', models.IntegerField(verbose_name='Defect')),
                ('fail_rate_stage', models.IntegerField(blank=True, null=True, verbose_name='Failure Rate')),
                ('issue_status', models.CharField(choices=[('Gating', 'Gating'), ('Tracking', 'Tracking'), ('Close', 'Close'), ('Fix in next phase', 'Fix in next phase')], max_length=50, verbose_name='Issue Status')),
                ('issue_photo', models.ImageField(blank=True, null=True, upload_to='region_case/images/', verbose_name='Defect Picture')),
                ('issue_desc', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Issue Description and Investigation')),
                ('root_cause', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Root Cause')),
                ('root_cause_category', models.CharField(choices=[('COMM', 'COMM'), ('COMM - Dfm', 'COMM Dfm'), ('COMM - Others', 'COMM-Others'), ('Commodity', 'Commodity'), ('Commodity - Dfm', 'Commodity Dfm'), ('Commodity - Others', 'Commodity Others'), ('Design - BIOS', 'Design-BIOS'), ('Design - EE', 'Design-EE'), ('Design - EE Dfm', 'Design-EE Dfm'), ('Design - Image Dfm', 'Design-Image Dfm'), ('Design - ME', 'Design-ME'), ('Design - ME Dfm', 'Design-ME Dfm'), ('Design - Others', 'Design-Others'), ('Design - SW', 'Design-SW'), ('Design - System Integration', 'Design-System Integration'), ('Diags', 'Diags'), ('Factory Operation', 'Factory Operation'), ('Material - BS', 'Material-BS'), ('Material - GTK', 'Material-GTK'), ('Material - Others', 'Material-Others'), ('Material - OTK', 'Material-OTK')], max_length=50, verbose_name='Root-cause Category')),
                ('short_term', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Short-Term')),
                ('short_term_category', models.CharField(choices=[('Containment - add on', 'Containment-add on'), ('Containment - rework', 'Containment-rework'), ('Containment - SOP/Fixture', 'Containment-SOP/Fixture'), ('Containment - sorting', 'Containment-sorting'), ('Inaction', 'Inaction'), ('Design', 'Design'), ('Waive', 'Waive')], max_length=50, verbose_name='Short-term Category')),
                ('long_term', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Long-Term')),
                ('long_term_category', models.CharField(choices=[('Design', 'Design'), ('Supplier', 'Supplier'), ('Factory - Process', 'Factory-Process'), ('Factory - Fixture', 'Factory-Fixture')], max_length=50, verbose_name='Long-term Category')),
                ('crate_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='Create Date')),
                ('platform_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platform', to='product.Products', verbose_name='Platform Name')),
                ('rpe_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rpe', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Regional',
                'verbose_name_plural': 'Regional',
                'db_table': 'datacube_regional_issue',
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processName', models.CharField(choices=[('1-SMT', 'SMT'), ('2-Off-line Assy', 'Offline-Assy'), ('3-Sub Assy Test', 'Offline-Test'), ('4-Final Assy ', 'FA'), ('5-Pre Test', 'Pre-Test'), ('6-Run-In', 'Run-In'), ('7-Image Download', 'Image D/L'), ('8-OOBA ', 'OOBA'), ('9-Packing ', 'Packing'), ('Field', 'Field'), ('Factory', 'Factory')], max_length=50, verbose_name='Issue is from')),
                ('issue_desc', models.TextField(default='', max_length=250, verbose_name='Issue Description')),
                ('impact_scope', models.CharField(choices=[('Factory', 'Factory'), ('Field ', 'Field'), ('Field + Factory', 'Field+Factory')], max_length=50, verbose_name='Impact Scope')),
                ('priority', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('.', '.')], default='.', max_length=10, verbose_name='Priority')),
                ('business_impact', models.CharField(blank=True, default='.', max_length=100, verbose_name='Biz Impact')),
                ('input_qty', models.IntegerField(blank=True, null=True, verbose_name='Total Input')),
                ('defect_qty', models.IntegerField(blank=True, null=True, verbose_name='Defect')),
                ('fail_rate_stage', models.TextField(blank=True, default='', null=True, verbose_name='Fail By Stage')),
                ('pre_build_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Prebuild Input')),
                ('pre_build_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Prebuild Defect')),
                ('mini_build_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-1/FAI Input')),
                ('mini_build_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-1/FAI Defect')),
                ('mini2_build_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-2 Input')),
                ('mini2_build_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-2 Defect')),
                ('balance_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Balance/Main Input')),
                ('balance_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Balance/Main Defect')),
                ('sn', models.TextField(blank=True, default='', max_length=300, null=True, verbose_name='SN Info')),
                ('sku', models.TextField(blank=True, default='', max_length=200, null=True, verbose_name='SKU Info')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='issue/images/', verbose_name='Defect Picture')),
                ('issue_analysis', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Issue Analysis')),
                ('root_cause', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Root Cause')),
                ('root_cause_category', models.CharField(blank=True, choices=[('COMM', 'COMM'), ('COMM - Dfm', 'COMM Dfm'), ('COMM - Others', 'COMM-Others'), ('Commodity', 'Commodity'), ('Commodity - Dfm', 'Commodity Dfm'), ('Commodity - Others', 'Commodity Others'), ('Design - BIOS', 'Design-BIOS'), ('Design - EE', 'Design-EE'), ('Design - EE Dfm', 'Design-EE Dfm'), ('Design - Image Dfm', 'Design-Image Dfm'), ('Design - ME', 'Design-ME'), ('Design - ME Dfm', 'Design-ME Dfm'), ('Design - Others', 'Design-Others'), ('Design - SW', 'Design-SW'), ('Design - System Integration', 'Design-System Integration'), ('Diags', 'Diags'), ('Factory Operation', 'Factory Operation'), ('Material - BS', 'Material-BS'), ('Material - GTK', 'Material-GTK'), ('Material - Others', 'Material-Others'), ('Material - OTK', 'Material-OTK')], max_length=50, null=True, verbose_name='Root Category')),
                ('short_term', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Short Term')),
                ('short_term_category', models.CharField(blank=True, choices=[('Containment - add on', 'Containment-add on'), ('Containment - rework', 'Containment-rework'), ('Containment - SOP/Fixture', 'Containment-SOP/Fixture'), ('Containment - sorting', 'Containment-sorting'), ('Inaction', 'Inaction'), ('Design', 'Design'), ('Waive', 'Waive')], max_length=50, null=True, verbose_name='Short Term Category')),
                ('long_term', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Long Term')),
                ('long_term_category', models.CharField(blank=True, choices=[('Design', 'Design'), ('Supplier', 'Supplier'), ('Factory - Process', 'Factory-Process'), ('Factory - Fixture', 'Factory-Fixture')], max_length=50, null=True, verbose_name='Long Term Category')),
                ('status', models.CharField(choices=[('Gating', 'Gating'), ('Tracking', 'Tracking'), ('Close', 'Close'), ('Fix in next phase', 'Fix in next phase')], max_length=50, verbose_name='Status')),
                ('obs', models.CharField(blank=True, max_length=10, null=True, verbose_name='OBS')),
                ('duplicate', models.CharField(blank=True, choices=[('Y', 'Y'), ('N', 'N')], max_length=5, null=True, verbose_name='Duplicate?')),
                ('errorCode', models.CharField(blank=True, max_length=10, null=True, verbose_name='Error Code')),
                ('repeating', models.CharField(blank=True, choices=[('Y', 'Y'), ('N', 'N')], max_length=5, null=True, verbose_name='is Repeat Issue?')),
                ('repeatingstage', models.CharField(blank=True, choices=[('SI-1', 'SI-1'), ('SI-2', 'SI-2'), ('SI-3', 'SI-3'), ('PV-1', 'PV-1'), ('PV-2', 'PV-2'), ('PV-3', 'PV-3'), ('PRB/TLD/PVR', 'PRB/TLD/PVR'), ('MV-1', 'MV-1'), ('MV-2', 'MV-2'), ('Ramp', 'Ramp'), ('Sustaining', 'Sustaining'), ('NA', 'NA')], max_length=50, null=True, verbose_name='Repeated Stage')),
                ('buildstage', models.CharField(choices=[('SI-1', 'SI-1'), ('SI-2', 'SI-2'), ('SI-3', 'SI-3'), ('PV-1', 'PV-1'), ('PV-2', 'PV-2'), ('PV-3', 'PV-3'), ('PRB/TLD/PVR', 'PRB/TLD/PVR'), ('MV-1', 'MV-1'), ('MV-2', 'MV-2'), ('Ramp', 'Ramp'), ('Sustaining', 'Sustaining'), ('NA', 'NA')], max_length=50, verbose_name='Stage')),
                ('owner', models.CharField(default='', max_length=100, verbose_name='Owner')),
                ('updatedate', models.DateField(blank=True, null=True, verbose_name='Update Date')),
                ('obs_link', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='OBS Link')),
                ('cratedate', models.DateTimeField(default=datetime.datetime.now, verbose_name='Create Date')),
                ('issue_interaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issue_interaction', to='npi.SymptomCategory_First', verbose_name='Category I')),
                ('issue_symptom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issue_symptom', to='npi.SymptomCategory_Second', verbose_name='Category II')),
                ('platformName', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='PlatformName', to='product.Products', verbose_name='Platform Name')),
            ],
            options={
                'verbose_name': 'NB',
                'verbose_name_plural': 'NB',
                'db_table': 'datacube_npi_issues',
            },
        ),
        migrations.CreateModel(
            name='DesktopIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processName', models.CharField(choices=[('1-SMT', 'SMT'), ('2-Off-line Assy', 'Offline-Assy'), ('3-Sub Assy Test', 'Offline-Test'), ('4-Final Assy ', 'FA'), ('5-Pre Test', 'Pre-Test'), ('6-Run-In', 'Run-In'), ('7-Image Download', 'Image D/L'), ('8-OOBA ', 'OOBA'), ('9-Packing ', 'Packing'), ('Field', 'Field'), ('Factory', 'Factory')], max_length=50, verbose_name='Issue is from')),
                ('issue_desc', models.TextField(default='', max_length=250, verbose_name='Issue Description')),
                ('impact_scope', models.CharField(choices=[('Factory', 'Factory'), ('Field ', 'Field'), ('Field + Factory', 'Field+Factory')], max_length=50, verbose_name='Impact Scope')),
                ('priority', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('.', '.')], default='.', max_length=10, null=True, verbose_name='Priority')),
                ('business_impact', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='Biz Impact')),
                ('input_qty', models.IntegerField(blank=True, null=True, verbose_name='Total Input')),
                ('defect_qty', models.IntegerField(blank=True, null=True, verbose_name='Defect')),
                ('fail_rate_stage', models.TextField(blank=True, default='', null=True, verbose_name='Fail By Stage')),
                ('pre_build_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Prebuild Input')),
                ('pre_build_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Prebuild Defect')),
                ('mini_build_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-1/FAI Input')),
                ('mini_build_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-1/FAI Defect')),
                ('mini2_build_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-2 Input')),
                ('mini2_build_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mini-2 Defect')),
                ('balance_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Balance/Main Input')),
                ('balance_defcet_qty', models.IntegerField(blank=True, default=0, null=True, verbose_name='Balance/Main Defect')),
                ('sn', models.TextField(blank=True, default='', max_length=300, null=True, verbose_name='SN Info')),
                ('sku', models.TextField(blank=True, default='', max_length=200, null=True, verbose_name='SKU Info')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='issue/images/', verbose_name='Defect Picture')),
                ('issue_analysis', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Issue Analysis')),
                ('root_cause', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Root Cause')),
                ('root_cause_category', models.CharField(blank=True, choices=[('Commodity Other', 'Commodity Other'), ('Commodity Quality', 'Commodity Quality'), ('Commodity Specification', 'Commodity Specification'), ('Commodity SW/FW', 'Commodity SW/FW'), ('Commodity Validation Gap', 'Commodity Validation Gap'), ('Design EE - Spec Change', 'Design EE-Spec Change'), ('Design EE - Validation Gap', 'Design EE-Validation Gap'), ('Design ME - Spec Change', 'Design ME-Spec Change'), ('Design ME - Validation Gap', 'Design ME-Validation Gap'), ('Design Other', 'Design Other'), ('Design SW/BIOS - Spec Change', 'Design SW/BIOS-Spec Change'), ('Design SW/BIOS - Validation Gap', 'Design SW/BIOS-Validation Gap'), ('DFM', 'DFM'), ('ODM Diag Test Gap', 'ODM Diag Test Gap'), ('SC HP AV BOM Issue', 'SC HP AV BOM Issue'), ('SC HP SC Internal Issue', 'SC HP SC Internal Issue'), ('SC HP SCM Rules, PCR/PCS Issue', 'SC HP SCM Rules, PCR/PCS Issue'), ('SC HP SKU Configuration', 'SC HP SKU Configuration'), ('SC ODM Quality', 'SC ODM Quality'), ('SC ODM Factory Operation', 'SC ODM Factory Operation'), ('SC ODM Sub-Supplier Change Management', 'SC ODM Sub-Supplier Change Management'), ('SC ODM Sub-Supplier Quality', 'SC ODM Sub-Supplier Quality'), ('SC ODM SW/Other Process', 'SC ODM SW/Other Process'), ('SC ODM Test Gap', 'SC ODM Test Gap'), ('SC Site(mfg) Quality', 'SC Site(mfg) Quality'), ('SC Site(mfg) SW/Other Process', 'SC Site(mfg) SW/Other Process'), ('SC Site(mfg) Test Gap', 'SC Site(mfg) Test Gap'), ('Supplier(GTK/BS) HW Module issue', 'Supplier(GTK/BS) HW Module issue'), ('Supplier(GTK/BS) Sub Supplier Quality', 'Supplier(GTK/BS) Sub Supplier Quality'), ('Supplier(GTK/BS) Vendor SW/FW', 'Supplier(GTK/BS) Vendor SW/FW'), ('Supplier(OTK)', 'Supplier(OTK)'), ('SW Component', 'SW Component'), ('Toolset Setting', 'Toolset Setting'), ('Image SW', 'Image SW'), ('SCMx/CISx Incorrect Version', 'SCMx/CISx Incorrect Version'), ('SW/SKU/ML Component', 'SW/SKU/ML Component'), ('Networking/IT Issue', 'Networking/IT Issue'), ('CS Tools - Tool Issue', 'CS Tools-Tool Issue'), ('ML/FWML Incorrect Version', 'ML/FWML Incorrect Version')], max_length=50, null=True, verbose_name='Root Category')),
                ('short_term', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Short Term')),
                ('short_term_category', models.CharField(blank=True, choices=[('Containment - add on', 'Containment-add on'), ('Containment - rework', 'Containment-rework'), ('Containment - SOP/Fixture', 'Containment-SOP/Fixture'), ('Containment - sorting', 'Containment-sorting'), ('Design', 'Design'), ('Inaction', 'Inaction'), ('Waive', 'Waive')], max_length=50, null=True, verbose_name='Short Term Category')),
                ('long_term', ckeditor_uploader.fields.RichTextUploadingField(default='', verbose_name='Long Term')),
                ('long_term_category', models.CharField(blank=True, choices=[('Design', 'Design'), ('Supplier', 'Supplier'), ('Factory - Process', 'Factory-Process'), ('Factory - Fixture', 'Factory-Fixture')], max_length=50, null=True, verbose_name='Long Term Category')),
                ('status', models.CharField(choices=[('Gating', 'Gating'), ('Tracking', 'Tracking'), ('Close', 'Close'), ('Fix in next phase', 'Fix in next phase')], max_length=50, verbose_name='Status')),
                ('obs', models.CharField(blank=True, max_length=10, null=True, verbose_name='OBS')),
                ('duplicate', models.CharField(blank=True, choices=[('Y', 'Y'), ('N', 'N')], max_length=5, null=True, verbose_name='Duplicate?')),
                ('errorCode', models.CharField(blank=True, max_length=10, null=True, verbose_name='Error Code')),
                ('repeating', models.CharField(blank=True, choices=[('Y', 'Y'), ('N', 'N')], max_length=5, null=True, verbose_name='is Repeat Issue?')),
                ('repeatingstage', models.CharField(blank=True, choices=[('SI', 'SI'), ('PV', 'PV'), ('PRB/TLD', 'PRB/TLD'), ('MV (Mini1)', 'MV(Mini1)'), ('MV (Mini2)', 'MV(Mini2)'), ('MV (Balance Build)', 'MV(Balance Build)'), ('Pre-Build (SP)', 'Pre-Build(SP)'), ('Mainbuild (MVB)', 'Mainbuild(MVB)'), ('CVB', 'CVB'), ('NA', 'NA')], max_length=50, null=True, verbose_name='Repeated Stage')),
                ('buildstage', models.CharField(choices=[('SI', 'SI'), ('PV', 'PV'), ('PRB/TLD', 'PRB/TLD'), ('MV (Mini1)', 'MV(Mini1)'), ('MV (Mini2)', 'MV(Mini2)'), ('MV (Balance Build)', 'MV(Balance Build)'), ('Pre-Build (SP)', 'Pre-Build(SP)'), ('Mainbuild (MVB)', 'Mainbuild(MVB)'), ('CVB', 'CVB'), ('NA', 'NA')], max_length=50, verbose_name='Stage')),
                ('owner', models.CharField(default='', max_length=50, verbose_name='Owner')),
                ('updatedate', models.DateField(blank=True, null=True, verbose_name='Update Date')),
                ('obs_link', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='OBS Link')),
                ('cratedate', models.DateTimeField(default=datetime.datetime.now, verbose_name='Create Date')),
                ('issue_interaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='desktop_issue_interaction', to='npi.SymptomCategory_First', verbose_name='Category I')),
                ('issue_symptom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='desktop_issue_symptom', to='npi.SymptomCategory_Second', verbose_name='Category II')),
                ('platformName', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='desktop_product', to='product.Products', verbose_name='Platform Name')),
            ],
            options={
                'verbose_name': 'DT',
                'verbose_name_plural': 'DT',
                'db_table': 'datacube_desktop_issues',
            },
        ),
        migrations.CreateModel(
            name='DataImportRecords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_product_name', models.CharField(help_text='导入产品名称', max_length=30, verbose_name='Product Name')),
                ('import_product_phase', models.CharField(help_text='导入产品阶段', max_length=50, verbose_name='Product Stage')),
                ('import_date', models.DateTimeField(default=datetime.datetime.now, help_text='导入时间', verbose_name='Import Date')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'upload record',
                'verbose_name_plural': 'upload record',
                'db_table': 'datacube_import_records',
            },
        ),
    ]
